import vm = require('vm');
import chalk = require('@fibjs/chalk');

const builtInModules = require('@fibjs/builtin-modules/lib/util/get-builtin-module-hash')();

const vbox = new vm.SandBox({
    ...builtInModules,
    chalk
});

/**
 * @see https://sourcegraph.com/github.com/Automattic/cli-table@master/-/blob/lib/index.js#L6:5
 */
type ICliTableConfig = {
    head?: string[],
    chars?: {
        /**
         * @sample '═'
         */
        'top'?: string
        /**
         * @sample '╤'
         */
        'top-mid'?: string
        /**
         * @sample '╔'
         */
        'top-left'?: string
        /**
         * @sample '╗'
         */
        'top-right'?: string
        /**
         * @sample '═'
         */
        'bottom'?: string
        /**
         * @sample '╧'
         */
        'bottom-mid'?: string
        /**
         * @sample '╚'
         */
        'bottom-left'?: string
        /**
         * @sample '╝'
         */
        'bottom-right'?: string
        /**
         * @sample '║'
         */
        'left'?: string
        /**
         * @sample '╟'
         */
        'left-mid'?: string
        /**
         * @sample '─'
         */
        'mid'?: string
        /**
         * @sample '┼'
         */
        'mid-mid'?: string
        /**
         * @sample '║'
         */
        'right'?: string
        /**
         * @sample '╢'
         */
        'right-mid'?: string
        /**
         * @sample '│'
         */
        'middle'?: string
    },
    style?: {
        head?: string[],
        border?: string[],
        'padding-left'?: number
        'padding-right'?: number,
        /**
         * @default false
         */
        compact?: boolean
    },
    colWidths?: number[]
    /**
     * @default '...''
     */
    truncate?: string
}

interface ICliTable extends Array<string[]> {
    toString(): string
}
const CliTable: {
    new(cfg: ICliTableConfig): ICliTable;
} = vbox.require('cli-table', __dirname);

export default CliTable;

export function makeTable (config: ICliTableConfig) {
    if (WinCliType === 'cmd') {
        config.style = {
            ...config.style,
            border: [],
            head: [],
        }
    }
    return new CliTable(config);
}

export const CHARS_CONFIG1: ICliTableConfig['chars'] = {
    'top': '═',
    'top-mid': '╤',
    'top-left': '╔',
    'top-right': '╗',
    'bottom': '═',
    'bottom-mid': '╧',
    'bottom-left': '╚',
    'bottom-right': '╝',
    'left': '║',
    'left-mid': '╟',
    'mid': '─',
    'mid-mid': '┼',
    'right': '║',
    'right-mid': '╢',
    'middle': '│'
};

export const CHARS_CONFIG_SIMPLE: ICliTableConfig['chars'] = {
    'top': '',
    'top-mid': '',
    'top-left': '',
    'top-right': '',
    'bottom': '',
    'bottom-mid': '',
    'bottom-left': '',
    'bottom-right': '',
    'left': '',
    'left-mid': '',
    'mid': '-',
    'mid-mid': '',
    'right': '',
    'right-mid': '',
    'middle': '│'
};

export function addEllipsisToOverLenCellContent(str: string, maxLen = 16) {
    if (str.length <= maxLen) return str;

    return str.slice(0, maxLen) + '...';
}

export const WinCliType = (process.platform !== 'win32' ? (
    'none'
) : (
    !process.env.TERM ? 'cmd' : 'xterm'
))

export function colorizeKeyword(
    str: string,
    strToMatch: string
) {
    if (!str || !strToMatch) return str;

    return str.replace(new RegExp(`(${strToMatch})`, 'gi'), (_: string, p1: string) => {
        /**
         * @why as of cli-table, it would break 
         * `require('ansi-styles').color.red.close` generated by chalk.red().
         * 
         * I dont know why now, but just run code below to start finding the reason of 
         * this issue: 
         * 
         * console.log(new Buffer("\033[0m", 'ascii')) // <Buffer 1b 5b 30 6d>
         * console.log(new Buffer(astyles.color.red.close, 'ascii')) // <Buffer 1b 5b 33 39 6d>
         * 
         * and code below:
         * 
         * console.log(new Buffer(chalk.red(strToMatch), 'ascii'))
         * console.log(new Buffer(astyles.color.red.open + strToMatch + astyles.color.close, 'ascii'))
         */
        if (WinCliType === 'xterm')
            return chalk.red(strToMatch) + '\033[0m';
        else if (WinCliType === 'cmd')
            return chalk.red(strToMatch) + '\033[0m';

        return chalk.red(strToMatch)
    });
}